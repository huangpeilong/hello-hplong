#

upstream ats_hls {
	keepalive 1024;
	server 127.0.0.1:8080;
}

server
{
	listen 80;
	server_name "pcvideoyd.titan.mgtv.com";
	set $hit "";
	set $request_time_msc "-";
	set $sub_reqs_uri "";
	set $ts_reqs_uri "";
	set $mp4_reqs_uri "";

        log_by_lua '
                ngx.var.request_time_msc = (tonumber(ngx.var.request_time) or 0) * 1000;
                if not ngx.var.request_time_msc then
                     ngx.log(ngx.ERR, "ngx.var.request_time_msc is nil")
                else
                   ngx.log(ngx.DEBUG, "request_time_msc:" .. ngx.var.request_time_msc);
                end
        ';

	location /cap_sub {
		set_by_lua $sub_reqs_uri '
			local ngx = require("ngx");
			local ngx = require("ngx");
			local g_cfg = require("global_conf");
			local hntv_crypt = require("hntv_crypt_lib");
			local args = ngx.req.get_uri_args();

			ngx.log(ngx.INFO , "******origin request_uri:[" .. ngx.var.request_uri .. "]");
			
			if args["pm"] then
				local ok, pm = hntv_crypt.decrypt(args["pm"], g_cfg["PNO"]["decrypt_key"]);
				if not ok then
					ngx.log(ngx.ERR, "decrypt URL:[" .. pm .. "] failed.");
					return ngx.var.request_uri;
				end
				local kv_tab = {};
				args["pm"] = nil;
				for k, v in pairs(args) do
					table.insert(kv_tab, string.format("%s=%s", k, v));
				end
				local t = table.concat(kv_tab, "&");
				local s = "";
				if #kv_tab > 0 then
					s = pm .. "&" .. t;
				else
					s = pm;
				end
				
				ngx.log(ngx.INFO, "********* un-encode-url:" .. s);
				ngx.var["sub_reqs_uri"] = ngx.var.uri .. "?" .. s;
				
			else
				ngx.var["sub_reqs_uri"] = ngx.var.request_uri;
			end	
			ngx.log(ngx.INFO, "###------### before sub_reqs_uri:[" .. ngx.var["sub_reqs_uri"] .. "]");
			return ngx.var["sub_reqs_uri"];
		';

		proxy_pass http://ats_hls$sub_reqs_uri;
		#proxy_pass http://ats_hls$request_uri;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header CDN "XIPU";
		client_body_buffer_size 256k;
		proxy_connect_timeout 60;
		proxy_send_timeout 300;
		proxy_read_timeout 300;
		proxy_buffer_size 512k;
		proxy_buffers 8 128k;
		proxy_busy_buffers_size 512k;
		proxy_temp_file_write_size 8m;
		proxy_ignore_client_abort on;
                proxy_http_version 1.1;
                proxy_set_header Connection "";

		header_filter_by_lua '
			ngx.header.content_length=nil;
		';
		#append parameters after ts lines in m3u8 file
		body_filter_by_lua '
			local ngx = require("ngx");
			local chunk = ngx.arg[1];
			ngx.log(ngx.WARN, "++++++ capture request:" .. ngx.var.request_uri)
			ngx.log(ngx.WARN, "===== chunk:" .. chunk)
			local func = function(m)
				local uri = ngx.var.request_uri or "";
				local st, ed = string.find(uri, "?");
				local para = string.sub(uri, st, -1) or "";
				return m[0] .. para;
			end

			local regex = [[\.ts]];
			local newstr, n, err = ngx.re.gsub(chunk, regex, func, "i");
			ngx.log(ngx.INFO, "newstr-->" .. newstr .. ", n=" .. tostring(n));
			ngx.log(ngx.INFO, "error info:" .. tostring(err));
			ngx.arg[1] = newstr;
		';
	}

	location ~ \.m3u8$ {
		limit_rate_after 3m;
		access_by_lua_file lua/module/hls_m3u8_request.lua;
		header_filter_by_lua_file lua/module/cache_lookup.lua;
		content_by_lua_file lua/module/hls_m3u8_capture.lua;
		lua_need_request_body on;
	}
	
	location ~ \.ts$ {
		limit_rate_after 3m;
		#set_by_lua_file $ts_reqs_uri lua/module/set_decrypt_variable.lua;
                set_by_lua $ts_reqs_uri '
                        local ngx = require("ngx");
                        local g_cfg = require("global_conf");
                        local hntv_crypt = require("hntv_crypt_lib");
                        local args = ngx.req.get_uri_args();

                        ngx.log(ngx.INFO , "******origin request_uri:[" .. ngx.var.request_uri .. "]");

                        if args["pm"] then
                                local ok, pm = hntv_crypt.decrypt(args["pm"], g_cfg["PNO"]["decrypt_key"]);
                                if not ok then
                                        ngx.log(ngx.ERR, "decrypt URL:[" .. pm .. "] failed.");
                                        return ngx.var.request_uri;
                                end
                                local kv_tab = {};
                                args["pm"] = nil;
                                for k, v in pairs(args) do
                                        table.insert(kv_tab, string.format("%s=%s", k, v));
                                end
                                local t = table.concat(kv_tab, "&");
                                local s = "";
                                if #kv_tab > 0 then
                                        s = pm .. "&" .. t;
                                else
                                        s = pm;
                                end

                                ngx.log(ngx.INFO, "********* un-encode-url:" .. s);
                                ngx.var["ts_reqs_uri"] = ngx.var.uri .. "?" .. s;

                        else
                                ngx.var["ts_reqs_uri"] = ngx.var.request_uri;
                        end
                        ngx.log(ngx.INFO, "###------### before sub_reqs_uri:[" .. ngx.var["ts_reqs_uri"] .. "]");
                        return ngx.var["ts_reqs_uri"];
                ';
		access_by_lua_file lua/module/hls_ts_request.lua;
		header_filter_by_lua_file lua/module/cache_lookup.lua;
		proxy_pass http://ats_hls$ts_reqs_uri;
		#proxy_pass http://ats_hls$request_uri;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header CDN "XIPU";
		client_body_buffer_size 256k;
		proxy_connect_timeout 60;
		proxy_send_timeout 300;
		proxy_read_timeout 300;
                proxy_http_version 1.1;
                proxy_set_header Connection "";
		#proxy_buffer_size 512k;
		#proxy_buffers 8 128k;
		#proxy_busy_buffers_size 512k;
		#proxy_temp_file_write_size 8m;
		proxy_ignore_client_abort on;
	}

	location ~ \.mp4$ {
		#set $limit_rate_after 3145728;
		limit_rate_after 3m;
		set_by_lua $mp4_reqs_uri '
			local ngx = require("ngx");
			local ngx = require("ngx");
			local g_cfg = require("global_conf");
			local hntv_crypt = require("hntv_crypt_lib");
			local args = ngx.req.get_uri_args();

			ngx.log(ngx.INFO , "******origin request_uri:[" .. ngx.var.request_uri .. "]");
			
			if args["pm"] then
				local ok, pm = hntv_crypt.decrypt(args["pm"], g_cfg["PNO"]["decrypt_key"]);
				if not ok then
					ngx.log(ngx.ERR, "decrypt URL:[" .. pm .. "] failed.");
					return ngx.var.request_uri;
				end
				local kv_tab = {};
				args["pm"] = nil;
				for k, v in pairs(args) do
					table.insert(kv_tab, string.format("%s=%s", k, v));
				end
				local t = table.concat(kv_tab, "&");
				local s = "";
				if #kv_tab > 0 then
					s = pm .. "&" .. t;
				else
					s = pm;
				end
				
				ngx.log(ngx.INFO, "********* un-encode-url:" .. s);
				ngx.var["mp4_reqs_uri"] = ngx.var.uri .. "?" .. s;
				
			else
				ngx.var["mp4_reqs_uri"] = ngx.var.request_uri;
			end	
			ngx.log(ngx.INFO, "###------### before sub_reqs_uri:[" .. ngx.var["mp4_reqs_uri"] .. "]");
			return ngx.var["mp4_reqs_uri"];
		';

		header_filter_by_lua_file lua/module/cache_lookup.lua;
		#content_by_lua_file lua/module/mp4_vod.lua;
		access_by_lua_file lua/module/mp4_vod.lua;

		slice 16m;
		proxy_set_header Range $slice_range;
		proxy_pass http://ats_hls$mp4_reqs_uri;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		client_body_buffer_size 256k;
		proxy_connect_timeout 60;
		proxy_send_timeout 300;
		proxy_read_timeout 300;
                proxy_http_version 1.1;
                proxy_set_header Connection "";
		#proxy_buffer_size 512k;
		#proxy_buffers 8 128k;
		#proxy_busy_buffers_size 512k;
		#proxy_temp_file_write_size 8m;
		proxy_ignore_client_abort on;
	}

        location /crossdomain.xml {
               proxy_pass http://ats_hls;
               proxy_set_header Host $host;
               proxy_set_header X-Real-IP $remote_addr;
               proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_connect_timeout 60;
                proxy_send_timeout 300;
                proxy_read_timeout 300;
                proxy_http_version 1.1;
                proxy_set_header Connection "";
                proxy_ignore_client_abort on;
        }
	error_log   logs/error.log   error;
}
