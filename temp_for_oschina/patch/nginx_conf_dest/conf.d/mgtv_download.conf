#
upstream download_ats {
	keepalive 1024;
	server 127.0.0.1:8080;
}

server
{
	listen 80;
	server_name pcdownyd.titan.mgtv.com;
	set $hit "";
	set $request_time_msc "-";
	set $decrypt_download_uri "";
        client_header_buffer_size    128k;
        large_client_header_buffers  4  128k;

	log_by_lua '
		ngx.var.request_time_msc = (tonumber(ngx.var.request_time) or 0) * 1000;
		if not ngx.var.request_time_msc then
			ngx.log(ngx.ERR, "ngx.var.request_time_msc is nil")
		else
			ngx.log(ngx.DEBUG, "request_time_msc:" .. ngx.var.request_time_msc);
		end
	';

	location ~ \.mp4$ {
		#set_by_lua_file $decrypt_download_uri lua/module/set_decrypt_variable.lua;

		set_by_lua $decrypt_download_uri '
			local ngx = require("ngx");
			local ngx = require("ngx");
			local g_cfg = require("global_conf");
			local hntv_crypt = require("hntv_crypt_lib");
			local args = ngx.req.get_uri_args();

			ngx.log(ngx.INFO , "******origin request_uri:[" .. ngx.var.request_uri .. "]");
			
			if args["pm"] then
				local ok, pm = hntv_crypt.decrypt(args["pm"], g_cfg["PNO"]["decrypt_key"]);
				if not ok then
					ngx.log(ngx.ERR, "decrypt URL:[" .. pm .. "] failed.");
					return ngx.var.request_uri;
				end
				local kv_tab = {};
				args["pm"] = nil;
				for k, v in pairs(args) do
					table.insert(kv_tab, string.format("%s=%s", k, v));
				end
				local t = table.concat(kv_tab, "&");
				ngx.log(ngx.INFO, "+++++++++++ concat table: pm--->" .. pm .. ", tab--->" .. t);
				local s = "";
				if #kv_tab > 0 then
					s = pm .. "&" .. t;
				else
					s = pm;
				end
				
				ngx.log(ngx.INFO, "********* un-encode-url:" .. s);
				ngx.var["decrypt_download_uri"] = ngx.var.uri .. "?" .. s;
				
			else
				ngx.var["decrypt_download_uri"] = ngx.var.request_uri;
			end	
			ngx.log(ngx.INFO, "###------### before decrypt_download_uri:[" .. ngx.var["decrypt_download_uri"] .. "]");
			return ngx.var["decrypt_download_uri"];
		';

		slice 16m;
		proxy_set_header Range $slice_range;
		#limit rate: 3MB/s
		limit_rate_after 3m;
		header_filter_by_lua_file lua/module/cache_lookup.lua;
		access_by_lua_file lua/module/mp4_download.lua;
		proxy_pass http://download_ats$decrypt_download_uri;
		proxy_set_header Host $host;
		#proxy_set_header User-Agent "XIPU-test-01";
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Is-EDU 0;
		proxy_set_header CDN "XIPU";
		#client_max_body_size 50m;
		#client_body_buffer_size 256k;
		proxy_connect_timeout 15;
		proxy_send_timeout 300;
		proxy_read_timeout 300;
		proxy_ignore_client_abort on;
                proxy_http_version 1.1;
                proxy_set_header Connection "";
		proxy_buffer_size 32k;
		proxy_buffers 4 16k;
		proxy_busy_buffers_size 32k;
		proxy_temp_file_write_size 32k;
	}

	error_page 500 502 503 504  /50x.html;

	location = /favicon.ico {
		return 403;
	}

	location = /50x.html {
		root   html;
	}	
	#error_log   logs/error.log   error;
	error_log   logs/error.log   debug;
}

